@model List<dotnetprojekt.Models.Wine>

@{
    ViewData["Title"] = "Search Results";
    string query = ViewData["Query"] as string ?? string.Empty;
    var wineTypes = ViewData["WineTypes"] as List<dotnetprojekt.Models.WineType> ?? new List<dotnetprojekt.Models.WineType>();
    var countries = ViewData["Countries"] as List<dotnetprojekt.Models.Country> ?? new List<dotnetprojekt.Models.Country>();
    var acidityLevels = ViewData["AcidityLevels"] as List<dotnetprojekt.Models.WineAcidity> ?? new List<dotnetprojekt.Models.WineAcidity>();
    var grapes = ViewData["Grapes"] as List<dotnetprojekt.Models.Grape> ?? new List<dotnetprojekt.Models.Grape>();
    var regions = ViewData["Regions"] as List<dotnetprojekt.Models.Region> ?? new List<dotnetprojekt.Models.Region>();
    var wineries = ViewData["Wineries"] as List<dotnetprojekt.Models.Winery> ?? new List<dotnetprojekt.Models.Winery>();
    
    int? selectedType = ViewData["SelectedType"] as int?;
    int? selectedCountry = ViewData["SelectedCountry"] as int?;
    int? selectedRegion = ViewData["SelectedRegion"] as int?;
    int? selectedGrape = ViewData["SelectedGrape"] as int?;
    int? selectedWinery = ViewData["SelectedWinery"] as int?;
    int? selectedAcidity = ViewData["SelectedAcidity"] as int?;
    decimal? minAbv = ViewData["MinAbv"] as decimal?;
    decimal? maxAbv = ViewData["MaxAbv"] as decimal?;
    int? minVintage = ViewData["MinVintage"] as int?;
    int? maxVintage = ViewData["MaxVintage"] as int?;
    
    // Determine min and max vintage year for range inputs
    int currentYear = DateTime.Now.Year;
    int oldestYear = 1950;
}

@if (TempData["AlertMessage"] != null)
{
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        @TempData["AlertMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="bg-beige-200 py-10">
    <div class="container mx-auto px-4">
        <h1 class="text-3xl font-bold mb-3 text-gray-800">Wine Search</h1>
        <form asp-controller="Search" asp-action="Index" method="get" class="flex">
            <input autocomplete="off" type="text" name="query" value="@query" class="flex-grow border-0 rounded-l-md px-6 py-3 focus:outline-none focus:ring-2 focus:ring-wine-500 bg-white text-gray-800 shadow-inner" placeholder="Search for wines by name, region, grape...">
            <button type="submit" class="bg-wine-600 hover:bg-wine-700 text-white font-bold px-8 py-3 rounded-r-md transition shadow">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
            </button>
        </form>
    </div>
</div>

<style>
    /* Custom scrollbar styles for select elements */
    select {
        scrollbar-width: thin;
        scrollbar-color: #7c2d12 #f5f5f4;
    }
    
    select::-webkit-scrollbar {
        width: 8px;
    }
    
    select::-webkit-scrollbar-track {
        background: #f5f5f4;
        border-radius: 4px;
    }
    
    select::-webkit-scrollbar-thumb {
        background-color: #7c2d12;
        border-radius: 4px;
        border: 2px solid #f5f5f4;
    }
    
    select::-webkit-scrollbar-thumb:hover {
        background-color: #9a3412;
    }
</style>

<div class="container mx-auto px-4 py-8">
    <div class="lg:flex lg:gap-8">
        <!-- Filter Sidebar -->
        <div class="lg:w-1/4 mb-6 lg:mb-0">
            <div class="bg-white rounded-lg shadow p-5 sticky top-5">
                <div class="flex justify-between items-center border-b pb-2 mb-4">
                    <h2 class="text-xl font-bold text-gray-800">Filter Results</h2>
                    <button id="toggleFilters" class="text-sm text-wine-600 hover:text-wine-800">
                        <span id="toggleText">Hide Filters</span>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                        </svg>
                    </button>
                </div>
                
                <form asp-controller="Search" asp-action="Index" method="get" id="filterForm">
                    <!-- Hidden input for search query -->
                    <input type="hidden" name="query" value="@query">
                    
                    <div id="filtersContainer">
                        <!-- Wine Types Filter -->
                        <div class="mb-6">
                            <h3 class="font-semibold mb-2 text-gray-700">Wine Type</h3>
                            <select name="typeId" class="w-full p-2 border rounded bg-beige-100 text-gray-700">
                                <option value="">All Types</option>
                                @foreach (var type in wineTypes)
                                {
                                    <option value="@type.Id" selected="@(selectedType == type.Id)">@type.Name</option>
                                }
                            </select>
                        </div>
                        
                        <!-- Countries Filter -->
                        <div class="mb-6">
                            <h3 class="font-semibold mb-2 text-gray-700">Country</h3>
                            <select name="countryId" id="countrySelect" class="w-full p-2 border rounded bg-beige-100 text-gray-700">
                                <option value="">All Countries</option>
                                @foreach (var country in countries)
                                {
                                    <option value="@country.Id" selected="@(selectedCountry == country.Id)">@country.Name</option>
                                }
                            </select>
                        </div>
                        
                        <!-- Regions Filter (dynamic based on country) -->
                        <div class="mb-6">
                            <h3 class="font-semibold mb-2 text-gray-700">Region</h3>
                            <select name="regionId" id="regionSelect" class="w-full p-2 border rounded bg-beige-100 text-gray-700">
                                <option value="">All Regions</option>
                                @foreach (var region in regions)
                                {
                                    <option value="@region.Id" selected="@(selectedRegion == region.Id)" 
                                            data-country="@region.CountryId">@region.Name</option>
                                }
                            </select>
                        </div>
                        
                        <!-- Winery Filter -->
                        <div class="mb-6">
                            <h3 class="font-semibold mb-2 text-gray-700">Winery</h3>
                            <select name="wineryId" id="winerySelect" class="w-full p-2 border rounded bg-beige-100 text-gray-700">
                                <option value="">All Wineries</option>
                                @foreach (var winery in wineries)
                                {
                                    <option value="@winery.Id" selected="@(selectedWinery == winery.Id)" 
                                            data-region="@winery.RegionId">@winery.Name</option>
                                }
                            </select>
                        </div>
                        
                        <!-- Grape Varieties Filter -->
                        <div class="mb-6">
                            <h3 class="font-semibold mb-2 text-gray-700">Grape Variety</h3>
                            <select name="grapeId" class="w-full p-2 border rounded bg-beige-100 text-gray-700">
                                <option value="">All Grape Varieties</option>
                                @foreach (var grape in grapes)
                                {
                                    <option value="@grape.Id" selected="@(selectedGrape == grape.Id)">@grape.Name</option>
                                }
                            </select>
                        </div>
                        
                        <!-- Acidity Levels Filter -->
                        <div class="mb-6">
                            <h3 class="font-semibold mb-2 text-gray-700">Acidity Level</h3>
                            <select name="acidityId" class="w-full p-2 border rounded bg-beige-100 text-gray-700">
                                <option value="">All Acidity Levels</option>
                                @foreach (var acidity in acidityLevels)
                                {
                                    <option value="@acidity.Id" selected="@(selectedAcidity == acidity.Id)">@acidity.Name</option>
                                }
                            </select>
                        </div>
                        
                        <!-- Vintage Range Filter -->
                        <div class="mb-6">
                            <h3 class="font-semibold mb-2 text-gray-700">Vintage Range</h3>
                            <div class="flex gap-2 items-center">
                                <input type="number" name="minVintage" value="@minVintage" placeholder="Min" min="@oldestYear" max="@currentYear" class="w-1/2 p-2 border rounded bg-beige-100 text-gray-700">
                                <span>to</span>
                                <input type="number" name="maxVintage" value="@maxVintage" placeholder="Max" min="@oldestYear" max="@currentYear" class="w-1/2 p-2 border rounded bg-beige-100 text-gray-700">
                            </div>
                        </div>
                        
                        <!-- ABV Range Filter -->
                        <div class="mb-6">
                            <h3 class="font-semibold mb-2 text-gray-700">ABV Range</h3>
                            <div class="flex gap-2 items-center">
                                <input type="number" name="minAbv" value="@minAbv" placeholder="Min" step="0.1" min="0" max="20" class="w-1/2 p-2 border rounded bg-beige-100 text-gray-700">
                                <span>to</span>
                                <input type="number" name="maxAbv" value="@maxAbv" placeholder="Max" step="0.1" min="0" max="20" class="w-1/2 p-2 border rounded bg-beige-100 text-gray-700">
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex space-x-2">
                        <button type="submit" class="bg-wine-600 hover:bg-wine-700 text-white px-4 py-2 rounded transition w-2/3">Apply Filters</button>
                        <a href="/Search/Index" class="bg-beige-300 hover:bg-beige-400 text-gray-800 px-4 py-2 rounded transition text-center w-1/3">Reset</a>
                    </div>
                </form>
            </div>
        </div>
        
        <!-- Search Results -->
        <div class="lg:w-3/4">
            <div class="bg-white rounded-lg shadow p-5 mb-6">
                <div class="flex justify-between items-center">
                    <h2 class="text-xl font-bold text-gray-800">
                        @if (!string.IsNullOrEmpty(query))
                        {
                            <span>Results for "@query"</span>
                        }
                        else
                        {
                            <span>All Wines</span>
                        }
                    </h2>
                </div>
            </div>
            
            @if (Model.Count > 0)
            {
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    @foreach (var wine in Model)
                    {
                        <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition">
                            <a href="/Wine/Details/@wine.Id" class="flex">
                                <!-- Wine label image -->
                                <div class="w-1/3 bg-gray-100">
                                    @{
                                        var imageId = wine.Id;
                                        var imagePath = $"/images/labels/{imageId}.jpeg";
                                    }
                                    <img src="@imagePath" 
                                         alt="@wine.Name label" 
                                         class="w-full h-full object-cover"
                                         onerror="this.onerror=null; this.src='/images/wine-placeholder.jpg';">
                                </div>
                                
                                <!-- Wine details -->
                                <div class="w-2/3 p-4">
                                    <h2 class="text-xl font-semibold mb-2 text-gray-800">@wine.Name</h2>
                                    <div class="flex flex-wrap gap-2 mb-3">
                                        @if (wine.Type != null)
                                        {
                                            <span class="px-2 py-1 text-xs font-semibold bg-beige-200 text-beige-800 rounded-full">
                                                @wine.Type.Name
                                            </span>
                                        }
                                        
                                        @if (wine.Country != null)
                                        {
                                            <span class="px-2 py-1 text-xs font-semibold bg-beige-200 text-beige-800 rounded-full">
                                                @wine.Country.Name
                                            </span>
                                        }
                                        
                                        @if (wine.Acidity != null)
                                        {
                                            <span class="px-2 py-1 text-xs font-semibold bg-beige-200 text-beige-800 rounded-full">
                                                @wine.Acidity.Name acidity
                                            </span>
                                        }
                                    </div>
                                    
                                    <p class="text-sm text-gray-600 line-clamp-2 mb-3">
                                        @(string.IsNullOrEmpty(wine.Elaborate) ? "No description available" : wine.Elaborate)
                                    </p>
                                    
                                    <div class="flex justify-between items-center">
                                        <span class="text-sm font-medium">@wine.ABV% ABV</span>
                                        <span class="text-wine-600 hover:text-wine-800 font-medium text-sm">View Details</span>
                                    </div>
                                </div>
                            </a>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="bg-white rounded-lg shadow p-8 text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-beige-400 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19.071 19.071c3.905-3.905 3.905-10.237 0-14.142-3.905-3.905-10.237-3.905-14.142 0-3.905 3.905-3.905 10.237 0 14.142 3.905 3.905 10.237 3.905 14.142 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M10 10l4 4m0-4l-4 4" />
                    </svg>
                    <h3 class="text-xl font-bold text-gray-800 mb-2">No wines found</h3>
                    <p class="text-gray-600 mb-4">We couldn't find any wines matching your search criteria.</p>
                    <p class="text-sm text-gray-500">Try different keywords or adjust your filters to see more results.</p>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Auto-submit form when select filters change
            const selectElements = document.querySelectorAll('#filterForm select');
            selectElements.forEach(select => {
                select.addEventListener('change', function() {
                    document.getElementById('filterForm').submit();
                });
            });
            
            // Toggle filters visibility
            const toggleBtn = document.getElementById('toggleFilters');
            const filtersContainer = document.getElementById('filtersContainer');
            const toggleText = document.getElementById('toggleText');
            
            toggleBtn.addEventListener('click', function() {
                if (filtersContainer.style.display === 'none') {
                    filtersContainer.style.display = 'block';
                    toggleText.textContent = 'Hide Filters';
                } else {
                    filtersContainer.style.display = 'none';
                    toggleText.textContent = 'Show Filters';
                }
            });
            
            // Dynamic filtering for regions based on country
            const countrySelect = document.getElementById('countrySelect');
            const regionSelect = document.getElementById('regionSelect');
            
            function filterRegions() {
                const countryId = countrySelect.value;
                
                if (!countryId) {
                    // Show all regions when no country is selected
                    const regionOptions = regionSelect.options;
                    for (let i = 0; i < regionOptions.length; i++) {
                        regionOptions[i].style.display = '';
                    }
                    
                    return;
                }
                
                // Fetch regions for the selected country
                fetch(`/api/regions?countryId=${countryId}`)
                    .then(response => response.json())
                    .then(regions => {
                        // Clear existing options except the first one (All Regions)
                        while (regionSelect.options.length > 1) {
                            regionSelect.remove(1);
                        }
                        
                        // Add new region options
                        regions.forEach(region => {
                            const option = document.createElement('option');
                            option.value = region.id;
                            option.text = region.name;
                            option.setAttribute('data-country', countryId);
                            regionSelect.add(option);
                        });
                    })
                    .catch(error => console.error('Error loading regions:', error));
            }
            
            // Add event listeners
            countrySelect.addEventListener('change', filterRegions);
        });
    </script>
}