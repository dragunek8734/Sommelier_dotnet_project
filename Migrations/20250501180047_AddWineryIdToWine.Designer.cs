// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using dotnetprojekt.Context;

#nullable disable

namespace dotnetprojekt.Migrations
{
    [DbContext(typeof(WineLoversContext))]
    [Migration("20250501180047_AddWineryIdToWine")]
    partial class AddWineryIdToWine
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("dotnetprojekt.Models.Admin", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("dotnetprojekt.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("dotnetprojekt.Models.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Dishes", (string)null);
                });

            modelBuilder.Entity("dotnetprojekt.Models.Grape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Grapes", (string)null);
                });

            modelBuilder.Entity("dotnetprojekt.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("RatingValue")
                        .HasColumnType("decimal(3,1)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("WineId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WineId");

                    b.ToTable("Ratings", "public");
                });

            modelBuilder.Entity("dotnetprojekt.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Region", (string)null);
                });

            modelBuilder.Entity("dotnetprojekt.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("dotnetprojekt.Models.UserPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BodyPreference")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PreferredAbvMax")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PreferredAbvMin")
                        .HasColumnType("numeric");

                    b.Property<int?>("PreferredAcidityId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreferredCountryId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("PreferredDishIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("PreferredFlavors")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PreferredRegionId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreferredWineTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("SweetnessPreference")
                        .HasColumnType("integer");

                    b.Property<int?>("TanninPreference")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PreferredAcidityId");

                    b.HasIndex("PreferredCountryId");

                    b.HasIndex("PreferredRegionId");

                    b.HasIndex("PreferredWineTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPreferences", (string)null);
                });

            modelBuilder.Entity("dotnetprojekt.Models.Wine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ABV")
                        .HasColumnType("numeric");

                    b.Property<int>("AcidityId")
                        .HasColumnType("integer");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Elaborate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<int[]>("GrapeIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<int[]>("PairWithIds")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .HasColumnType("tsvector");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<string[]>("Vintages")
                        .IsRequired()
                        .HasColumnType("varchar[]");

                    b.Property<int?>("WineryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ABV")
                        .HasDatabaseName("idx_wines_abv");

                    b.HasIndex("AcidityId")
                        .HasDatabaseName("idx_wines_acidityid");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("idx_wines_country");

                    b.HasIndex("GrapeIds")
                        .HasDatabaseName("idx_wines_grapeids");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("GrapeIds"), "GIN");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_wines_name");

                    b.HasIndex("PairWithIds")
                        .HasDatabaseName("idx_wines_pairwithids");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("PairWithIds"), "GIN");

                    b.HasIndex("SearchVector")
                        .HasDatabaseName("idx_wines_searchvector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("idx_wines_typeid");

                    b.HasIndex("WineryId");

                    b.ToTable("Wines", (string)null);
                });

            modelBuilder.Entity("dotnetprojekt.Models.WineAcidity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Wine_acidity", (string)null);
                });

            modelBuilder.Entity("dotnetprojekt.Models.WineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Wine_types", (string)null);
                });

            modelBuilder.Entity("dotnetprojekt.Models.Winery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Winery", (string)null);
                });

            modelBuilder.Entity("dotnetprojekt.Models.Admin", b =>
                {
                    b.HasOne("dotnetprojekt.Models.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("dotnetprojekt.Models.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotnetprojekt.Models.Rating", b =>
                {
                    b.HasOne("dotnetprojekt.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnetprojekt.Models.Wine", "Wine")
                        .WithMany("Ratings")
                        .HasForeignKey("WineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Wine");
                });

            modelBuilder.Entity("dotnetprojekt.Models.Region", b =>
                {
                    b.HasOne("dotnetprojekt.Models.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("dotnetprojekt.Models.UserPreference", b =>
                {
                    b.HasOne("dotnetprojekt.Models.WineAcidity", "PreferredAcidity")
                        .WithMany()
                        .HasForeignKey("PreferredAcidityId");

                    b.HasOne("dotnetprojekt.Models.Country", "PreferredCountry")
                        .WithMany()
                        .HasForeignKey("PreferredCountryId");

                    b.HasOne("dotnetprojekt.Models.Region", "PreferredRegion")
                        .WithMany()
                        .HasForeignKey("PreferredRegionId");

                    b.HasOne("dotnetprojekt.Models.WineType", "PreferredWineType")
                        .WithMany()
                        .HasForeignKey("PreferredWineTypeId");

                    b.HasOne("dotnetprojekt.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreferredAcidity");

                    b.Navigation("PreferredCountry");

                    b.Navigation("PreferredRegion");

                    b.Navigation("PreferredWineType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotnetprojekt.Models.Wine", b =>
                {
                    b.HasOne("dotnetprojekt.Models.WineAcidity", "Acidity")
                        .WithMany("Wines")
                        .HasForeignKey("AcidityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnetprojekt.Models.Country", "Country")
                        .WithMany("Wines")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnetprojekt.Models.WineType", "Type")
                        .WithMany("Wines")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnetprojekt.Models.Winery", "Winery")
                        .WithMany("Wines")
                        .HasForeignKey("WineryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Acidity");

                    b.Navigation("Country");

                    b.Navigation("Type");

                    b.Navigation("Winery");
                });

            modelBuilder.Entity("dotnetprojekt.Models.Winery", b =>
                {
                    b.HasOne("dotnetprojekt.Models.Region", "Region")
                        .WithMany("Wineries")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("dotnetprojekt.Models.Country", b =>
                {
                    b.Navigation("Regions");

                    b.Navigation("Wines");
                });

            modelBuilder.Entity("dotnetprojekt.Models.Region", b =>
                {
                    b.Navigation("Wineries");
                });

            modelBuilder.Entity("dotnetprojekt.Models.User", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("dotnetprojekt.Models.Wine", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("dotnetprojekt.Models.WineAcidity", b =>
                {
                    b.Navigation("Wines");
                });

            modelBuilder.Entity("dotnetprojekt.Models.WineType", b =>
                {
                    b.Navigation("Wines");
                });

            modelBuilder.Entity("dotnetprojekt.Models.Winery", b =>
                {
                    b.Navigation("Wines");
                });
#pragma warning restore 612, 618
        }
    }
}
